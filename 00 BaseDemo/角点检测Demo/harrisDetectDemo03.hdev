<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="20.11.1.0">
<procedure name="main">
<interface/>
<body>
<c>        </c>
<c>* harris 角点检测demo</c>
<c>* </c>
<c>* Image Acquisition 02: Code generated by Image Acquisition 02</c>
<l>list_files ('D:/01 Work/feelerTek_20230415_20230415/05 计数项目_202308_/叠料数据集/01 普通绿色O圈', ['files','follow_links'], ImageFiles)</l>
<l>tuple_regexp_select (ImageFiles, ['\\.(tif|tiff|gif|bmp|jpg|jpeg|jp2|png|pcx|pgm|ppm|pbm|xwd|ima|hobj)$','ignore_case'], ImageFiles)</l>
<l>for Index := 0 to |ImageFiles| - 1 by 1</l>
<l>    read_image (Image, ImageFiles[Index])</l>
<c>    * Image Acquisition 02: Do something</c>
<l>    dev_close_window ()</l>
<l>    get_image_size (Image, Width, Height)</l>
<l>    dev_open_window (0, 0, Width/3, Height/3, 'black', WindowHandle)</l>
<l>    dev_set_part (0, 0, Height/3 - 1, Width/3 - 1)</l>
<c>    * </c>
<l>    SigmaGrad := 1.0</l>
<l>    SigmaSmooth := 2.0</l>
<l>    Threshold := 1000000</l>
<l>    PointRange := 3</l>
<c>    * 算出原始轮廓点</c>
<l>    points_harris (Image, SigmaGrad, SigmaSmooth, 0.04, Threshold, Row, Col)</l>
<c></c>
<l>    rgb1_to_gray(Image, GrayImage)</l>
<l>    threshold(GrayImage, Region, 0, 120)</l>
<l>    connection(Region, ConnectedRegions)</l>
<c>    * 生成轮廓点</c>
<l>    gen_contour_region_xld (ConnectedRegions, Contours, 'border')</l>
<c>    * 生成凸包</c>
<l>    shape_trans(ConnectedRegions, RegionTrans, 'convex')</l>
<l>    count_obj (Contours,Number)</l>
<c>    </c>
<l>    tuple_length(Row,harrisLength)</l>
<c>    * 循环遍历harris 点</c>
<l>    for i := 1 to harrisLength by 1</l>
<c>        * 遍历每一个blob</c>
<l>        for j := 1 to Number by 1</l>
<l>            select_obj(Contours,ObjectSelected, j)</l>
<l>            select_obj(ConnectedRegions,ObjectAreaSelected,j)</l>
<l>            get_contour_xld(ObjectSelected,contourRow, contourCol)</l>
<l>            smallest_rectangle1 (ObjectAreaSelected,Row1, Column1, Row2, Column2)</l>
<l>            distanceRow1 := Row[i -1] - Row1[0]</l>
<l>            distanceRow2 := Row2[0] - Row[i -1]</l>
<l>            distanceCol1 := Col[i -1] - Column1[0]</l>
<l>            distanceCol2 := Column2[0] - Col[i -1] </l>
<l>            tuple_length(contourRow, contourSelectLength)</l>
<l>            if((Row[i -1] &gt;= Row1[0] and Row[i -1] &lt;= Row2[0]) and (Col[i -1] &gt;= Column1[0] and Col[i-1] &lt;= Column2[0]))</l>
<c>                *  遍历每一个轮廓点</c>
<l>                for k := 1 to contourSelectLength by 1</l>
<c>                    </c>
<l>                endfor</l>
<l>            else</l>
<l>                break</l>
<l>            endif</l>
<l>        endfor</l>
<l>    endfor</l>
<c>    </c>
<l>    gen_cross_contour_xld (Cross, Row, Col, 20, rad(45))</l>
<c></c>
<l>*     gen_circle_contour_xld(ContCircle, Row, Column1, 8, 0, 6.28318, 'positive', 1)</l>
<c>    * </c>
<l>    dev_set_line_width (2)</l>
<l>    dev_display (Image)</l>
<l>    dev_set_color ('red')</l>
<l>    dev_display (Contours)</l>
<l>    dev_set_color ('green')</l>
<l>    dev_display(Cross)</l>
<l>*     dev_display (ContCircle)</l>
<l>    stop()</l>
<l>endfor</l>
<c></c>
<c></c>
<c></c>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
