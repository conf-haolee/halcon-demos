<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="20.11.1.0">
<procedure name="main">
<interface/>
<body>
<c>* In this example, the task is to split the touching pellets.</c>
<c>* 分水岭分割算法 计数</c>
<c>* </c>
<l>classfied_num := 5</l>
<l>for num_i := 1 to classfied_num by 1</l>
<c>    * 数字转字符串</c>
<l>    tuple_string(num_i,'0',str_num_i)</l>
<c>    </c>
<l>    true_count:= 0</l>
<c>    * Image Acquisition 01: Code generated by Image Acquisition 01</c>
<l>    list_files ('D:/GXNU/9.ImageSet/5.halcon_generate_circile_classified/val/circle_' + str_num_i , ['files','follow_links'], ImageFiles)</l>
<l>    tuple_regexp_select (ImageFiles, ['\\.(tif|tiff|gif|bmp|jpg|jpeg|jp2|png|pcx|pgm|ppm|pbm|xwd|ima|hobj)$','ignore_case'], ImageFiles)</l>
<l>    for Index := 5 to |ImageFiles| - 1 by 1</l>
<l>        read_image (Image, ImageFiles[Index])</l>
<c>        * Image Acquisition 01: Do something</c>
<l>        rgb1_to_gray(Image, GrayImage)</l>
<c>        * 1 阈值分割 分离连通域</c>
<l>        get_image_size (GrayImage, Width, Height)</l>
<l>        threshold (GrayImage, Region, 0, 150)</l>
<l>        connection (Region, ConnectedRegions)</l>
<l>        select_shape (ConnectedRegions, SelectedRegions, 'area', 'and', 20, 99999)</l>
<c>        * 欧式距离变换函数</c>
<l>        distance_transform (SelectedRegions, DistanceImage, 'euclidean', 'true', Width, Height)</l>
<l>        convert_image_type (DistanceImage, DistanceImageByte, 'byte')</l>
<l>        invert_image (DistanceImageByte, DistanceImageInv)</l>
<l>        scale_image_max (DistanceImageInv, DistanceImageInvScaled)</l>
<l>        watersheds_threshold (DistanceImageInv, Basins, 10)</l>
<c>    </c>
<c>        * 取出区域重叠部分，得到分割图像</c>
<l>        intersection (Basins, SelectedRegions, SegmentedCircles)</l>
<l>        count_obj(SegmentedCircles,Number)</l>
<l>*         stop()</l>
<l>        if (Number == num_i)</l>
<l>            true_count:= true_count + 1</l>
<l>        endif</l>
<l>    endfor</l>
<c>    *  true_count * 1.0 变成浮点数</c>
<l>    true_rate:= ((true_count * 1.0 / Index *1.0) * 100) $'.2' </l>
<l>*      stop()</l>
<c>    </c>
<l>    path := 'D:/GXNU/9.ImageSet/5.halcon_generate_circile_classified/' + 'circle' + num_i + '.watersheds_true_count_val.txt'</l>
<l>    open_file(path,'output', FileHandle)</l>
<l>    fwrite_string(FileHandle, '=' + true_count + '/' +  Index)</l>
<l>    fnew_line (FileHandle)</l>
<l>    fwrite_string(FileHandle, '正确率：' + true_rate + '%')</l>
<l>    close_file(FileHandle)</l>
<l>endfor</l>
<c></c>
<c></c>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
